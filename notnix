#!/usr/bin/env lua
-- notnix
-- Copyright (c) 2025 Kamal Fasya
-- This is free a software licensed under the terms of the MIT license. See LICENSE for details.

-- fuck libdnf5, wym "attributeerror: 'RepoSackWeakPtr' object has no attribute 'load_repos'"???? I follow the docs correctly motherfucker

-- TODO: make a pkgs_git, it will clone git repo and do installation on command provided by user
local CHUD = [[
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⠿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⡀⠀⢀⠀⠙⣿⣿
⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⣠⣴⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣷⡌⣿⣿
⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⡿⣿⣿⣿⣿⡜⣿
⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣷⢿⣿⣿⣇⣿⣿⣿⣿⣧⣿
⣿⣿⣿⣿⣿⣿⣿⡇⡆⠀⠀⣸⣿⣯⡉⠙⠛⠿⣿⣿⢺⣿⣿⡇⢿⡿⠿⠛⠉⣿
⣿⣿⣿⣿⣿⣿⣿⢁⡟⣀⣘⣛⣛⡛⢩⣤⣤⣤⣤⣀⠻⠿⠿⡇⢊⣀⣐⣚⡃⢻
⣿⣿⣿⣿⣿⣿⣿⠸⣧⣽⣿⣿⣿⡇⢼⠰⠀⠈⠙⣻⠆⣾⣷⡆⢘⡋⠉⣽⡇⢸
⣿⣿⣿⣿⣿⣿⣿⡅⣿⣿⣿⣿⣿⣧⣬⣉⣂⣚⣛⢋⣠⣿⣿⣿⢀⡐⢀⢛⡃⣸
⣿⣿⣿⣿⣿⣿⣿⣧⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⡘⣿⣿⣿⡇⣿
⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠩⡿⠛⢿⠿⢃⣿⣿⡿⢣⣿
⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⡿⣿⣿⣿⣿⣿⡿⣸⡷⠾⠿⣿⢶⡇⣿⡿⣡⣿⣿
⣿⣿⣿⣿⣿⣿⣿⡿⢸⣿⣿⡇⣿⣿⣿⣿⣿⢣⣁⠬⣽⣿⣒⠓⣁⠿⣡⣿⣿⣿ nothing ever happens
⣿⣿⣿⣿⣿⣿⣿⠇⣿⣿⣿⣵⣿⣿⣿⣿⣿⣿⣿⣷⢖⣉⢱⣾⡟⣴⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⢏⣾⣿⣿⢟⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣋⣭⣾⣿⣿⣿⣿⣿
⣿⣿⡿⢟⣛⣁⣾⣿⣟⣣⣿⣿⣿⣿⣿⣿⣿⣿⣯⣯⣥⣿⣬⣝⣛⣛⣛⣛⡻⠿
⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⣝⠻⠟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿]]

local color = {}

color.info = "\27[32m"
color.warn = "\27[33m"
color.error = "\27[31m"
color.reset = function()
	print("\27[0m")
end

local SNAPSHOT_PKG = ".snapshot_pkg.lua"
local SNAPSHOT_REPO = ".snapshot_repo.lua"
local SNAPSHOT_FLATPAK = ".snapshot_flatpak.lua"
local SNAPSHOT_GIT = ".snapshot_git.lua"
local CONFIG_FILENAME = "config.lua"

local function is_file_exist(file)
	local _, err = os.rename(file, file)
	if err then
		return false
	end
	return true
end

-- return value is path to config folder
local function _get_config_dir_path()
	local home = os.getenv("HOME")
	local xdg_config_home = os.getenv("XDG_CONFIG_HOME")

	local path = xdg_config_home and xdg_config_home .. "notnix/" or home .. "/.config/notnix/"
	return path
end

-- make config file and folder if not available
local function _make_config()
	local path = _get_config_dir_path()

	if not is_file_exist(path) then
		print(color.warn .. "[WARNING]: notnix config folder not found")
		print("[INFO]: creating folder " .. path)
		os.execute("mkdir " .. path)
	end

	if not is_file_exist(path .. SNAPSHOT_PKG) then
		local f = assert(io.open(path .. SNAPSHOT_PKG, "w"), color.error .. "[ERROR]: cant create snapshot file")
		print("[INFO]: creating folder " .. path)
		f:write("-- WARNING: do not modify this file\nreturn {}")
		f:close()
	end

	if not is_file_exist(path .. SNAPSHOT_GIT) then
		local f = assert(io.open(path .. SNAPSHOT_GIT, "w"), color.error .. "[ERROR]: cant create snapshot file")
		f:write("-- WARNING: do not modify this file\nreturn {}")
		f:close()
	end

	if not is_file_exist(path .. SNAPSHOT_REPO) then
		local f = assert(io.open(path .. SNAPSHOT_REPO, "w"), color.error .. "[ERROR]: cant create snapshot file")
		f:write("-- WARNING: do not modify this file\nreturn {}")
		f:close()
	end

	if not is_file_exist(path .. SNAPSHOT_FLATPAK) then
		local f = assert(io.open(path .. SNAPSHOT_FLATPAK, "w"), color.error .. "[ERROR]: cant create snapshot file")
		f:write("-- WARNING: do not modify this file\nreturn {}")
		f:close()
	end

	if not is_file_exist(path .. "config.lua") then
		print(color.warn .. "[WARNING]: config file doesn't exist")
		color.reset()
		print("[INFO]: creating config file, see " .. path .. CONFIG_FILENAME .. " for config options")
		local _ = assert(io.open("./config.lua", "r"), color.error .. "[ERROR]: cant find config file in current dir")
		local cfg = _:read("*a")
		local f = assert(io.open(path .. "config.lua", "w"), color.error .. "[ERROR]: cant create config file")

		f:write(cfg)
		f:close()
		_:close()
	end
end

-- general purpose utils for both Git and Pkg
local Util = {}

-- load table of string and turn them into a single string delimited by spaces
function Util.load(pkgs_table)
	local s = ""

	if not #pkgs_table then
		return s
	end

	for i = 1, #pkgs_table do
		-- :gsub() here means remove any whitespace
		s = s .. pkgs_table[i]:gsub("%s+", "") .. " " -- yes, there will be trailing spaces and you will love it
	end

	-- will return something like "fastfetch tmux nvim "
	return s
end

function Util.snapshot(pkgs_table, luafile)
	local t = "return {\n"

	for i = 1, #pkgs_table do
		local pkg = '"' .. pkgs_table[i] .. '"' .. ",\n" -- thank God lua allow trailing comma
		t = t .. pkg
	end

	t = t .. "}"
	local f = assert(io.open(luafile, "w"))
    -- stylua: ignore
    f:write(
        "-- WARNING: do not modify this file\n"
        .. t
    )
	f:close()
end

-- return table of found dups
function Util.detect_dups(pkgs)
	local t_dups = {}
	table.sort(pkgs)

	for i = 1, #pkgs do
		local a = pkgs[i]:gsub("%s+", "")
		local b = pkgs[i + 1] and pkgs[i + 1]:gsub("%s+", "") or nil -- pkgs[i + 1] ? tru : fals ternary operator type shit

		if a == b then
			table.insert(t_dups, pkgs[i])
		end
	end

	return t_dups
end

-- return a nested table of add and remove
function Util.detect_changes(pkg, snapshot)
	if snapshot == nil then
		snapshot = {}
	end

	local changes = {
		add = {},
		remove = {},
	}

	local hashmap = {}

	-- e.g hashmap["vlc"] = true
	for _, v in ipairs(snapshot) do
		hashmap[v] = true
	end

	-- check new items in pkg and remove found ones from hashmap
	for _, v in ipairs(pkg) do
		v = v:gsub("%s+", "")
		if not hashmap[v] then
			table.insert(changes.add, v)
		end
		hashmap[v] = nil -- lua actually doesnt iterate over nil-valued key
	end

	-- remaining keys in hashmap are removed items
	for k in pairs(hashmap) do
		table.insert(changes.remove, k)
	end

	return changes
end

-- category specific utils
local Pkg = {}

function Pkg.install(pkgs_table, install_cmd, assume_yes)
	local yes = assume_yes and "yes | " or ""
	local _, _, c = os.execute(("%s %s %s"):format(yes, install_cmd, Util.load(pkgs_table)))
	return c
end

function Pkg.remove(pkgs_table, remove_cmd, assume_yes)
	local yes = assume_yes and "yes | " or ""
	local _, _, c = os.execute(("%s %s %s"):format(yes, remove_cmd, Util.load(pkgs_table)))
	return c
end

--- Main notnix functionality
-- @string cfg_file the path to notnix config file, see config.lua
-- @boolean is_tracking=true will track installed package, you might not want this if you just want to install pkgs
-- since this will create folder in $HOME/.config/notnix (or $XDG_CONFIG_HOME if specified)
-- this function will do os.exit, no return
-- exit code > 0 is error
local function notnix(cfg_file, is_tracking)
	local s_pkg
	local s_repo
	local s_flat
	local path = _get_config_dir_path()

	if cfg_file == nil then
		print("[ERROR]: No config file is provided")
		os.exit(1)
	end

	local Config = dofile(cfg_file)

	if is_tracking then
		s_pkg = dofile(path .. SNAPSHOT_PKG)
		s_repo = dofile(path .. SNAPSHOT_REPO)
		s_flat = dofile(path .. SNAPSHOT_FLATPAK)
	end

	-- DETECT DUPS --
	local flat_dups = Util.detect_dups(Config.flatpaks)
	if #flat_dups > 0 then
		print(color.error .. "[ERROR]: found duplicates:")
		for i = 1, #flat_dups do
			print(color.error .. "\t- " .. flat_dups[i])
		end

		print(color.error .. "[ERROR]: please remove flatpak duplicates to continue")
		os.exit(1)
	end

	local repo_dups = Util.detect_dups(Config.repos)
	if #repo_dups > 0 then
		print(color.error .. "[ERROR]: found duplicates:")
		for i = 1, #repo_dups do
			print(color.error .. "\t- " .. repo_dups[i])
		end

		print(color.error .. "[ERROR]: please remove repo duplicates to continue")
		os.exit(1)
	end

	local pkgs_dups = Util.detect_dups(Config.pkgs)
	if #pkgs_dups > 0 then
		print(color.error .. "[ERROR]: found duplicates:")
		for i = 1, #pkgs_dups do
			print(color.error .. "\t- " .. pkgs_dups[i])
		end

		print(color.error .. "[ERROR]: please remove duplicates to continue")
		os.exit(1)
	end

	local pkgs = Util.detect_changes(Config.pkgs, s_pkg)
	local flat = Util.detect_changes(Config.flatpaks, s_flat)
	local repos = Util.detect_changes(Config.repos, s_repo)

    -- if no changes whatsoever print CHUD, because nothing happens
    -- stylua: ignore start
	if (#pkgs.add == 0 and #pkgs.remove == 0
        and #flat.add == 0 and #flat.remove == 0
        and #repos.add == 0 and #repos.remove == 0
    ) then
		print(CHUD)
		print("[INFO]: Nothing to do, no packages added/removed")
		os.exit(0)
	end
	-- stylua: ignore end

	-- == FLATPAK INSTALL & REMOVE ==
	if #flat.add > 0 then
		local y = Config.assume_yes_install and " -y" or ""
		print("[INFO]: Installing new flatpak:")
		for i = 1, #flat.add do
			print("\t- " .. flat.add[i])
			local _, _, c = os.execute("flatpak install flathub " .. flat.add[i] .. y)

			if c > 0 then
				print(color.error .. "[ERROR]: Cant install flatpak app: " .. flat.add[i])
				os.exit(1)
			end

			Util.snapshot(Config.flatpaks, path .. SNAPSHOT_FLATPAK)
		end
	end

	if #flat.remove > 0 then
		local y = Config.assume_yes_remove and " -y" or ""
		print("[INFO]: Removing flatpak:")
		for i = 1, #flat.remove do
			print("\t- " .. flat.remove[i])

			local _, _, c = os.execute("flatpak uninstall " .. flat.remove[i] .. y)
			if c > 0 then
				print(color.error .. "[ERROR]: Cant remove flatpak: " .. flat.remove[i])
				os.exit(1)
			end
			Util.snapshot(Config.flatpaks, path .. SNAPSHOT_FLATPAK)
		end
	end

	-- == REPOS ADD & REMOVE ==
	if #repos.add > 0 then
		print("[INFO]: Adding new repos:")
		for i = 1, #repos.add do
			print("\t- " .. repos.add[i])
			local _, _, c = os.execute(("%s %s -y"):format(Config.add_repo, repos.add[i]))

			if c > 0 then
				print(color.error .. "[ERROR]: Cant add repo: " .. repos.add[i])
				os.exit(1)
			end

			-- i can return the FILE ptr and close it after the loop finishes
			-- it's faster, but unnecessary as i am not running on apollo 11 computer
			-- BUT I'M ITCHING TO OPTIMIZE IT OH GOD I LOVE PREMATURE OPTIMIZATION
			Util.snapshot(Config.repos, path .. SNAPSHOT_REPO)
		end
		local _, _, c = os.execute(Config.update_cache)
		if c > 0 then
			print(color.error .. "[ERROR]: Cant update repo cache")
			os.exit(1)
		end
	end

	if #repos.remove > 0 then
		print("[INFO]: Removing repos:")
		for i = 1, #repos.remove do
			print("\t- " .. repos.remove[i])
			local _, _, c = os.execute(("%s %s -y"):format(Config.remove_repo, repos.remove[i]))

			if c > 0 then
				print(color.error .. "[ERROR]: Cant remove repo: " .. repos.remove[i])
				os.exit(1)
			end

			Util.snapshot(Config.repos, path .. SNAPSHOT_REPO)
		end
	end

	-- == PKGS INSTALL & REMOVE ==
	if #pkgs.add > 0 then
		print("[INFO]: Installing new packages:")
		for i = 1, #pkgs.add do
			print("\t- " .. pkgs.add[i])
		end

		if Pkg.install(pkgs.add, Config.install, Config.assume_yes_install) > 0 then
			os.exit(1)
		end
		Util.snapshot(Config.pkgs, path .. SNAPSHOT_PKG)
	end

	if #pkgs.remove > 0 then
		print("[INFO]: Removing packages:")
		for i = 1, #pkgs.remove do
			print("\t- " .. pkgs.remove[i])
		end
		if Pkg.remove(pkgs.remove, Config.remove, Config.assume_yes_remove) > 0 then
			os.exit(1)
		end
		Util.snapshot(Config.pkgs, path .. SNAPSHOT_PKG)
	end
end

local function main()
	local path = _get_config_dir_path() -- ends in '/' e.g bla/bla/notnix/
	-- local s_gits = dofile(path .. SNAPSHOT_PKG)

	local help_msg = [[notnix: nix-like package-manager but not really
usage: notnix [option]
  options:
    -h              | --help            | help ->   show this help message

    -f <filename>   | --file <filename> |      ->   use config file to install pkgs
                                                    with this flag installed pkgs wont be tracked
                                                    so your $XDG_CONFIG_HOME stays clean

    upgrade         | update            | up   ->   upgrading packages found in the list
    update-fp       | upf               |      ->   update flatpak packages found in the list
    list-fp         | lfp               |      ->   list all flatpak app
    list-repo       | lr                |      ->   list all added repo (e.g copr repo)
]]

-- stylua: ignore start
	if arg[1] ~= nil then
		if arg[1] == "-h" or arg[1] == "--help" or arg[1] == "help" then
			print(help_msg)
			os.exit(0)

		elseif arg[1] == "-f" or arg[1] == "--file" then
			local file = arg[2]
			if file == nil then
				print(color.error .. "[ERROR]: Provide a file after -f flag dude damn...")
				os.exit(1)
			end

			if not is_file_exist(file) then
				print(color.error .. "[ERROR]: File doesnt fucking exist")
				os.exit(1)
			end

			notnix(file, false)

		elseif arg[1] == "up" or arg[1] == "update" or arg[1] == "upgrade" then
			local Config = dofile(path .. CONFIG_FILENAME)
			local s_pkgs = dofile(path .. SNAPSHOT_PKG)
			print("[INFO]: Upgrading packages")
			for i = 1, #s_pkgs do
				print("\t- " .. s_pkgs[i])
			end
			Pkg.install(Config.pkgs, Config.upgrade, Config.assume_yes_install)
			os.exit(0)

        elseif arg[1] == "upf" or arg[1] == "update-fp" then
            local _, _, c = os.execute("flatpak update")
			os.exit(c)

		elseif arg[1] == "lp" or arg[1] == "list-pkg" then
			local s_pkgs = dofile(path .. SNAPSHOT_PKG)
			print("[INFO]: List of Installed pkgs:")
			for i = 1, #s_pkgs do
				print("\t- " .. s_pkgs[i])
			end
			os.exit(0)

		elseif arg[1] == "lr" or arg[1] == "list-pkg" then
			local s_repos = dofile(path .. SNAPSHOT_REPO)
			print("[INFO]: List of repos:")
			for i = 1, #s_repos do
				print("\t- " .. s_repos[i])
			end
			os.exit(0)

		elseif arg[1] == "lfp" or arg[1] == "list-lfp" then
			local s_fp = dofile(path .. SNAPSHOT_FLATPAK)
			print("[INFO]: Installed flatpak apps:")
			for i = 1, #s_fp do
				print("\t- " .. s_fp[i])
			end
			os.exit(0)

		-- WARNING: NOT IMPLEMENTED YET
		elseif arg[1] == "lg" or arg[1] == "list-git" then
			local Config = dofile(path .. CONFIG_FILENAME)
			-- this somehow doesnt output a determinate list,
			-- it kinda shuffles, but doesn't matter because it doesnt affect functionality
			print("[INFO]: List of git repos\n")
			for k, v in pairs(Config.git_pkgs) do
				print(k)
				print("\t- repo : ", v["repo"])
				print("\t- run  :", v["run"])
			end
			os.exit(0)

		else
			print(color.error .. "[ERROR]: Wrong argument fool, use -h for more info")
			os.exit(1)
		end

	else
        _make_config()
	    notnix(path .. CONFIG_FILENAME, true)
	end
	-- stylua: ignore end
end

main()
